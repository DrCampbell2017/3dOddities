require("main.global.controls")

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 20
-- gravity pulling the player down in pixel units
local gravity = -15
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 7
-- Terminal velocity is max call speed
local terminalVelocity = -20
-- Coyote time
local coyoteTimeLimit = .1
-- How long can a player pre-press jump and still jump
local prePressJumpFrames = 10

local ANIM = {}
ANIM.FRONT = "front"
ANIM.BACK = "back"
ANIM.LEFT = "left"
ANIM.RIGHT = "right"

local function play_animation(self, anim)
	if self.anim ~= anim then
		--print("Playing: " .. tostring(anim))
		self.anim = anim
		sprite.play_flipbook("#sprite", anim) -- "player_jump"
	end
end

----------------
-- Jump Logic --
----------------

-------------
-- Actions --
-------------

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact or self.timeFromGround <= coyoteTimeLimit then
		--jumpSound(self)
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		self.ground_contact = false
	end
end

local function jump_on_landing(self)
	self.framesPressedJump = self.framesPressedJump + 1
	if self.ground_contact and self.framesPressedJump < prePressJumpFrames then
		--jumpSound(self)
		self.ground_contact = false
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

--------------------
-- Ground Contact --
--------------------

local function checkForGroundContact(self)
	local pos = go.get_position()
	local to = vmath.vector3(pos.x, pos.y - 6, pos.z)
	local groups = { hash("walls") }
	local result = physics.raycast(pos, to, groups)
	return result ~= nil
end

--------------------
-- Move Character --
--------------------

local function update_moveCharacter(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt
	if self.velocity.y < terminalVelocity then
		self.velocity.y = terminalVelocity
	end

	local moveXZ = vmath.vector3(self.velocity.x, 0, self.velocity.z)
	if vmath.length_sqr(moveXZ) > 1 then
		moveXZ = vmath.normalize(moveXZ)
		self.velocity.x = moveXZ.x
		self.velocity.z = moveXZ.z
	end

	if not self.ground_contact then
		self.ground_contact = checkForGroundContact(self)
	end
	if self.ground_contact and self.velocity.y < 0 then
		self.timeFromGround = 0
		self.velocity.y = 0
	end
	-- print("Ground contact: " .. tostring(self.ground_contact))
	local p = go.get_position()
	local newp
	if self.ground_contact then
		newp = p + self.velocity * max_speed * dt
	else
		-- move slower in the air
		newp = p + self.velocity * air_acceleration_factor * max_speed * dt
	end
	go.set_position(newp)

	-- make sure the right animation is playing
	local moving = true
	local inAir = not self.ground_contact
	if self.ground_contact then
		if self.velocity.x == 0 and self.velocity.z == 0 then
			moving = false
		else
			if self.velocity.x > 0 then 
				-- right
				self.dir = ANIM.RIGHT
			elseif self.velocity.x < 0 then 
				-- left
				self.dir = ANIM.LEFT
			elseif self.velocity.z > 0 then 
				-- front
				self.dir = ANIM.FRONT
			elseif self.velocity.z < 0 then 
				-- back
				self.dir = ANIM.BACK
			end
		end
	end

	if not self.ground_contact then
		self.timeFromGround = self.timeFromGround + dt
		if self.timeFromGround > 2 then
			inAir = true
		end
	end

	local text
	if inAir then
		text = "jump_" .. self.dir
	elseif moving then
		text = "walk_" .. self.dir
	else
		text = "idle_" .. self.dir
	end
	play_animation(self, text)

	--print("Velocity: " .. tostring(self.velocity))
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.velocity.x = 0
	self.velocity.z = 0
end

----------------
-- Collisions --
----------------

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	if math.abs(normal.z) > 0.7 then
		self.wall_contact = true
		self.velocity.z = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.8 then
		self.timeFromGround = 0
		self.ground_contact = true
		self.velocity.y = 0
	end

	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end
----------
-- Core --
----------

function init(self)
	msg.post(".", "acquire_input_focus")
	self.canMove = true
	self.anim = nil
	self.dir = ANIM.FRONT
	self.jump = false

	-- Player input
	self.velocity = vmath.vector3(0, 0, 0)

	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	self.timeFromGround = 0
	self.framesPressedJump = 0
end

function final(self)
	msg.post(".", "release_input_focus")
end

function fixed_update(self, dt)
	if self.canMove then
		update_moveCharacter(self, dt)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("walls") then
			handle_obstacle_contact(self, message.normal, message.distance)
		end

	elseif message_id == hash("gift_info") then
		self.sender = sender

	elseif message_id == hash("give_movement") then
		msg.post(".", "acquire_input_focus")
		self.canMove = true

	elseif message_id == hash("remove_movement") then
		self.canMove = false
		msg.post(".", "release_input_focus")
	end
end

function on_input(self, action_id, action)
	-- mouse pos
	local oldPos = vmath.vector3(action.x, action.y, 1)
	if self.canMove then
		if action_id == CONTROLS.jump.key then
			if action.pressed then
				jump(self)
			elseif action.released then
				abort_jump(self)
				self.framesPressedJump = 0
			else
				jump_on_landing(self)
			end

		elseif action_id == CONTROLS.move_right.key then
			self.velocity.x = 1
		elseif action_id == CONTROLS.move_left.key then
			self.velocity.x = -1
		elseif action_id == CONTROLS.move_up.key then
			self.velocity.z = -1
		elseif action_id == CONTROLS.move_down.key then
			self.velocity.z = 1
		end
	end
end

